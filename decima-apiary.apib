FORMAT: 1A

# Decima

Decima is a service that tracks deployments, knows what version is deployed in an environment,
and eventually will track dependencies and verify deployments are what we think they are.

Navigating to the root of Decima will expose the UI. For now, it is only a simple
HTML page that lists the endpoints. We will be working to expose this as a true
UI for the service allowing you to check on deployments and enter new dependencies.

## How It Works
Currently, we feed deploy events into Decima using two tools: `autoprod` & `apps-marathon`.

### Autoprod
In order for a service deployed via autoprod to have its deployments tracked in Decima 
a couple things have to happen.

1. All build jobs that are used as a source of deployment artifacts must generate 
and archive a `build_info.yml` file in the following format:

    ```yml
    ---
    service: phidippides
    version: 0.0.13-SNAPSHOT
    service_sha: 480f77c0
    configuration: http://jenkins.sea1.socrata.com/job/phidippides/152/
    ```
2. The `release` task for the service (in autoprod) must call `log_deploy_event` with the correct parameters.
For examples of this look at Phidippides, Geoserver, Frontend or Core.

### Apps-Marathon
In order for a dockerized service (deployed via apps-marathon) to be tracked in Decima, the docker image must be in the correct format.
The format is: 
```
<version>_<build_num>_<service_sha>[_<docker_sha>]
```
* `_<docker_sha>` is an optional parameter reserved for projects that keep their docker files in a seperate repository.
* Examples:
    * `0.1.4-SNAPSHOT_888_be4ecd4f` (w/o docker_sha)
    * `0.5.6_790_5c19779f_a9dd4777` (with docker_sha)

# Group Deploy

Resources related to deploys.

A deploy has the following attributes:

+ id
+ service
+ environment
+ service_sha
+ docker_sha
+ configuration
+ deployed_by
+ deploy_method
+ deployed_at

## Deployments [/deploy{?service}{?environment}]

### View the current state of all environments [GET]
This is the way to get information about what is deployed in each environment *right now*.

It allows filters on `service` & `environment` using query parameters to allow users to return only the deployments they are interested in.

+ Parameters

    + service (string, optional) - The service to return deploy events for.
    + environment (string, optional) - The environment to return deploy events for.

+ Response 200 (application/json)

        [
            {
                "id": 6,
                "service": "core",
                "environment": "staging",
                "version": "1.1.5",
                "service_sha": "blah",
                "docker_sha": "foobar",
                "configuration": "{ \"this\": \"is a config file\" }",
                "deployed_by": "an engineer",
                "deploy_method": "autoprod",
                "deployed_at": "2015-05-14T16:30:44Z"
            },
            {
                "id": 8,
                "service": "core",
                "environment": "production",
                "version": "1.1.1",
                "service_sha": "blah",
                "docker_sha": "foobar",
                "configuration": "{ \"this\": \"is a config file\" }",
                "deployed_by": "an engineer",
                "deploy_method": "autoprod",
                "deployed_at": "2015-05-14T16:30:46Z"
            },
            {
                "id": 9,
                "service": "core",
                "environment": "rc",
                "version": "1.1.5",
                "service_sha": "blah",
                "docker_sha": "foobar",
                "configuration": "{ \"this\": \"is a config file\" }",
                "deployed_by": "an engineer",
                "deploy_method": "autoprod",
                "deployed_at": "2015-05-14T16:30:47Z"
            },
            {
                "id": 15,
                "service": "phidippides",
                "environment": "staging",
                "version": "0.2.5",
                "service_sha": "blah",
                "docker_sha": "foobar",
                "configuration": "{ \"this\": \"is a config file\" }",
                "deployed_by": "an engineer",
                "deploy_method": "autoprod",
                "deployed_at": "2015-05-14T16:30:54Z"
            },
            {
                "id": 17,
                "service": "phidippides",
                "environment": "production",
                "version": "0.2.1",
                "service_sha": "blah",
                "docker_sha": "foobar",
                "configuration": "{ \"this\": \"is a config file\" }",
                "deployed_by": "an engineer",
                "deploy_method": "autoprod",
                "deployed_at": "2015-05-14T16:30:56Z"
            },
            {
                "id": 18,
                "service": "phidippides",
                "environment": "rc",
                "version": "0.2.5",
                "service_sha": "blah",
                "docker_sha": "foobar",
                "configuration": "{ \"this\": \"is a config file\" }",
                "deployed_by": "an engineer",
                "deploy_method": "autoprod",
                "deployed_at": "2015-05-14T16:30:57Z"
            },
            {
                "id": 24,
                "service": "frontend",
                "environment": "staging",
                "version": "0.11.5",
                "service_sha": "blah",
                "docker_sha": "foobar",
                "configuration": "{ \"this\": \"is a config file\" }",
                "deployed_by": "an engineer",
                "deploy_method": "autoprod",
                "deployed_at": "2015-05-14T16:31:03Z"
            },
            {
                "id": 26,
                "service": "frontend",
                "environment": "production",
                "version": "0.11.1",
                "service_sha": "blah",
                "docker_sha": "foobar",
                "configuration": "{ \"this\": \"is a config file\" }",
                "deployed_by": "an engineer",
                "deploy_method": "autoprod",
                "deployed_at": "2015-05-14T16:31:05Z"
            },
            {
                "id": 27,
                "service": "frontend",
                "environment": "rc",
                "version": "0.11.5",
                "service_sha": "blah",
                "docker_sha": "foobar",
                "configuration": "{ \"this\": \"is a config file\" }",
                "deployed_by": "an engineer",
                "deploy_method": "autoprod",
                "deployed_at": "2015-05-14T16:31:06Z"
            }
        ]

### Notify Decima of a deployment [PUT]

This creates a deploy object. It takes a JSON payload with the following keys:

+ service
+ environment
+ service_sha
+ docker_sha (optional)
+ configuration (optional)
+ deployed_by
+ deploy_method

+ Request (application/json)

        {
            "service": "phidippides",
            "environment": "production",
            "service_sha": "fwerdc32k",
            "deployed_by": "an engineer",
            "deploy_method": "apps-marathon:promote"
        }
        
+ Response 200 (application/json)
    
        {
            "id": 24
            "service": "phidippides",
            "environment": "production",
            "service_sha": "fwerdc32k",
            "deployed_by": "an engineer",
            "deploy_method": "apps-marathon:promote",
            "deployed_at": "2015-05-14T16:30:44Z"
        }
    
## Deployment History [/deploy/history{?service}{?environment}{?limit}]

### Get the history of recent deployment events [GET]

The endpoint to understand the history of deployments by service or environment. It uses query parameters 
to allow filtering on `service` or `environment`, as well as a `limit` parameter to specify how many 
events to return.

+ Parameters

    + service (string, optional) - The service to return deploy events for.
    + environment (string, optional) - The environment to return deploy events for.
    + limit (number, optional) - The number of deploy events to return.
        + Default: `100`
        
+ Response 200 (application/json)

        [
            {
                "id": 27,
                "service": "frontend",
                "environment": "rc",
                "version": "0.11.5",
                "service_sha": "blah",
                "docker_sha": "foobar",
                "configuration": "{ \"this\": \"is a config file\" }",
                "deployed_by": "an engineer",
                "deploy_method": "autoprod",
                "deployed_at": "2015-05-14T16:31:06Z"
            },
            {
                "id": 26,
                "service": "frontend",
                "environment": "production",
                "version": "0.11.1",
                "service_sha": "blah",
                "docker_sha": "foobar",
                "configuration": "{ \"this\": \"is a config file\" }",
                "deployed_by": "an engineer",
                "deploy_method": "autoprod",
                "deployed_at": "2015-05-14T16:31:05Z"
            },
            {
                "id": 25,
                "service": "frontend",
                "environment": "rc",
                "version": "0.11.3",
                "service_sha": "blah",
                "docker_sha": "foobar",
                "configuration": "{ \"this\": \"is a config file\" }",
                "deployed_by": "an engineer",
                "deploy_method": "autoprod",
                "deployed_at": "2015-05-14T16:31:04Z"
            },
            {
                "id": 24,
                "service": "frontend",
                "environment": "staging",
                "version": "0.11.5",
                "service_sha": "blah",
                "docker_sha": "foobar",
                "configuration": "{ \"this\": \"is a config file\" }",
                "deployed_by": "an engineer",
                "deploy_method": "autoprod",
                "deployed_at": "2015-05-14T16:31:03Z"
            }
        ]
    

